You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.

Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
Sample Input

/*
Enter your query here.
*/
 
select
    BST.N
    ,case
        when BST.P is null then 'Root'
        when not exists (select 1 from BST as BST_Search where BST.N = BST_Search.P) then 'Leaf'
        else 'Inner'
    end as NodeType
from BST
order by N


2. 
SELECT  c.company_code,
        c.founder,
       count(distinct lm.lead_manager_code),
       count(distinct sm.senior_manager_code),
       count(distinct m.manager_code),
       count(distinct e.employee_code)
FROM company c 
    left join lead_manager lm
    on c.company_code = lm.company_code
        left join senior_manager sm
        on c.company_code = sm.company_code
            left join manager m
            on c.company_code = m.company_code
                left join employee e
                on c.company_code = e.company_code
GROUP BY c.company_code , c.founder
ORDER BY c.company_code;

3.Delete dups 

DELETE
FROM sales
WHERE rowid IN
  (SELECT rid
  FROM
    (SELECT rowid rid,
      id,
      salesman_id,
      sales_item,
      sales_num,
      sales_price,
      DATETIME,
      row_number() over (partition BY salesman_id,sales_item,sales_num,sales_price order by id) r_flag
    FROM sales
    WHERE EXTRACT(MONTH FROM DATETIME) = 3
    AND SALESMAN_ID                    = 40
    )
  WHERE r_flag != 1
  );


refer:
 https://academy.vertabelo.com/blog/common-sql-window-functions-partitions-ranking-functions/
 
 /*****Ranking ovder sums *****/
 
 1. 
Query 1:

SELECT Age,
       Qualification,
       Income,
       RANK() OVER ( PARTITION BY Age, Qualification ORDER BY Income DESC ) AS "Rank"
FROM   Employees
Results:

| AGE | QUALIFICATION | INCOME | Rank |
|-----|---------------|--------|------|
|  19 |          Grad |   5000 |    1 |
|  19 |          Grad |   4000 |    2 |
|  19 |          Grad |   3000 |    3 |
|  26 |          Grad |   6000 |    1 |
|  26 |          Grad |   5000 |    2 |
|  26 |          PosG |   8000 |    1 |
|  26 |          PosG |   6000 |    2 |
Query 2:

WITH total_incomes AS (
  SELECT Age,
         Qualification,
         SUM( Income ) AS total_income
  FROM   Employees
  GROUP BY
         Age,
         Qualification
)
SELECT Age,
       Qualification,
       total_income,
       RANK() OVER ( ORDER BY total_income DESC ) AS "Rank"
FROM   total_incomes
Results:

| AGE | QUALIFICATION | TOTAL_INCOME | Rank |
|-----|---------------|--------------|------|
|  26 |          PosG |        14000 |    1 |
|  19 |          Grad |        12000 |    2 |
|  26 |          Grad |        11000 |    3 |
shareimprove this answer
edited Jul 23 '15 at 9:29
answered Jul 23 '15 at 9:23

MT0
51.8k52756
add a comment

up vote
0
down vote
select  age,qualification,total_income
row_number() over (partition by age,qualification order by income desc) as rank from
(
Select age,qualification,sum(income) as total_income  from employee
group by age,qualification
) T1
 
